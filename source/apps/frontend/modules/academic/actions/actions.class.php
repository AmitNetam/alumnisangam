<?php
// auto-generated by sfPropelCrud
// date: 2009/02/10 08:17:12
?>
<?php

/**
 * academic actions.
 *
 * @package    sf_sandbox
 * @subpackage academic
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class academicActions extends sfActions
{

  public function executeShow()
  {
	$userid = $this->getUser()->getAttribute('userid');
    $c = new Criteria();
    $c->add(AcademicPeer::USER_ID, $userid);
    $this->academics = AcademicPeer::doSelect($c);
    
    $c->clear();
    $c->add(UserbadgePeer::USER_ID, $userid);
    $this->userbadges = UserbadgePeer::doSelect($c);
    
    $c->clear();
    $c->add(UserbadgePeer::USER_ID, $userid);
    $c->addSelectColumn(UserbadgePeer::BADGE_ID);
    $userbadges = UserbadgePeer::doSelectRS($c);
    
    $ubarray = array();
    foreach ($userbadges as $ub){
    	$ubarray[] = $ub[0];
    }
    
    $c->clear();
    $c->add(BadgePeer::ID, $ubarray, Criteria::NOT_IN);
    $c->addAscendingOrderByColumn(BadgePeer::NAME);
    $allbadges = BadgePeer::doSelect($c);
    $badgelist = array();
    $badgelist[] = '-- Select --';
    foreach ($allbadges as $badge){
    	$badgelist[$badge->getId()] = $badge->getName();
    }
    $this->badgelist = $badgelist;
  }

  public function executeGetbadge(){
  	$badgeid = $this->getRequestParameter('newbadge');
  	$userid = $this->getUser()->getAttribute('userid');
  	if($badgeid){
	  	$ub = new Userbadge();
	  	$ub->setUserId($userid);
	  	$ub->setBadgeId($badgeid);
	  	$ub->save();
  		$this->setFlash('notice', 'Badge added to your profile successfully.');
  	}else{
  		$this->setFlash('notice', 'Please select a badge.');
  	}
  	$this->redirect('academic/show');
  }

  public function executeDeletebadge(){
  	$badgeid = $this->getRequestParameter('id');
  	$userid = $this->getUser()->getAttribute('userid');
  	$c = new Criteria();
  	$c->add(UserbadgePeer::USER_ID, $userid);
  	$c->add(UserbadgePeer::BADGE_ID, $badgeid);
  	$ub = UserbadgePeer::doSelectOne($c);
  	if($ub){
  		$ub->delete();
  		$this->setFlash('notice', 'Badge removed from your profile successfully.');
  	}
  	
  	$this->redirect('/academic/show');
  	
  }
  
  public function executeCreate()
  {
    $this->academic = new Academic();

    $this->setTemplate('edit');
  }

  public function executeEdit(){
    $this->academic = AcademicPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->privacyoptions = Array('1' => 'Myself', '2' => 'Friends', '3' => 'IT BHU', '4'=>'Everyone');   
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $academic = new Academic();
    }
    else
    {
      $academic = AcademicPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($academic);
    }

    $userid = $this->getUser()->getAttribute('userid');
    
    $academic->setId($this->getRequestParameter('id'));
    $academic->setUserId($userid);
    $academic->setDegree($this->getRequestParameter('degree'));
    $academic->setDegreeflag($this->getRequestParameter('degreeflag'));
    $academic->setYear($this->getRequestParameter('year'));
    $academic->setYearflag($this->getRequestParameter('yearflag'));
    $academic->setDepartment($this->getRequestParameter('department'));
    $academic->setDepartmentflag($this->getRequestParameter('departmentflag'));
    $academic->setInstitute($this->getRequestParameter('institute'));
    $academic->setInstituteflag($this->getRequestParameter('instituteflag'));
    $academic->save();
    return $this->redirect('academic/show');
  }

  public function executeDelete()
  {
    $academic = AcademicPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($academic);
    $academic->delete();
    return $this->redirect('academic/show');
  }
  
  public function executeAdd(){
  	$this->academic = new Academic();
  	$this->userid = $this->getUser()->getAttribute('userid');
  	$this->privacyoptions = Array('1' => 'Myself', '2' => 'Friends', '3' => 'IT BHU', '4' => 'Everyone');
  	$this->setTemplate('edit');
  }
  
}
  
