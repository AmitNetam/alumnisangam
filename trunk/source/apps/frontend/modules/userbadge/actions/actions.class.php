<?php
// auto-generated by sfPropelCrud
// date: 2009/02/10 08:19:22
?>
<?php

/**
 * userbadge actions.
 *
 * @package    sf_sandbox
 * @subpackage userbadge
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class userbadgeActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('userbadge', 'list');
  }

  public function executeList()
  {
    $this->userbadges = UserbadgePeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->userbadge = UserbadgePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->userbadge);
  }

  public function executeCreate()
  {
    $this->userbadge = new Userbadge();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->userbadge = UserbadgePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->userbadge);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $userbadge = new Userbadge();
    }
    else
    {
      $userbadge = UserbadgePeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($userbadge);
    }

    $userbadge->setId($this->getRequestParameter('id'));
    $userbadge->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);
    $userbadge->setBadgeId($this->getRequestParameter('badge_id') ? $this->getRequestParameter('badge_id') : null);
    $userbadge->setBadgeflag($this->getRequestParameter('badgeflag'));

    $userbadge->save();

    return $this->redirect('userbadge/show?id='.$userbadge->getId());
  }

  public function executeDelete()
  {
    $userbadge = UserbadgePeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($userbadge);

    $userbadge->delete();

    return $this->redirect('userbadge/list');
  }
}
