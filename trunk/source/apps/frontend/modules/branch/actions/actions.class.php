<?php
// auto-generated by sfPropelCrud
// date: 2009/02/10 08:17:36
?>
<?php

/**
 * branch actions.
 *
 * @package    sf_sandbox
 * @subpackage branch
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class branchActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('branch', 'list');
  }

  public function executeList()
  {
    $this->branchs = BranchPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->branch = BranchPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->branch);
  }

  public function executeCreate()
  {
    $this->branch = new Branch();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->branch = BranchPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->branch);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $branch = new Branch();
    }
    else
    {
      $branch = BranchPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($branch);
    }

    $branch->setId($this->getRequestParameter('id'));
    $branch->setName($this->getRequestParameter('name'));

    $branch->save();

    return $this->redirect('branch/show?id='.$branch->getId());
  }

  public function executeDelete()
  {
    $branch = BranchPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($branch);

    $branch->delete();

    return $this->redirect('branch/list');
  }
}
