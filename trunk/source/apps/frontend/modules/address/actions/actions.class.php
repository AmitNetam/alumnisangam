<?php
// auto-generated by sfPropelCrud
// date: 2009/02/10 08:16:21
?>
<?php

/**
 * address actions.
 *
 * @package    sf_sandbox
 * @subpackage address
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class addressActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('address', 'list');
  }

  public function executeList()
  {
    $this->addresss = AddressPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
  	$c = new Criteria();
  	$c->add(UserPeer::USERNAME, $this->getUser()->getAttribute('username'));
  	$user = UserPeer::doSelectOne($c);
    
    $c = new Criteria();
    $c->add(AddressPeer::USER_ID, $user->getId());
    $this->address = AddressPeer::doSelectOne($c);
  	
    //$this->address = AddressPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->address);
  }

  public function executeCreate()
  {
    $this->address = new Address();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
  	$c = new Criteria();
  	$c->add(UserPeer::USERNAME, $this->getUser()->getAttribute('username'));
  	$user = UserPeer::doSelectOne($c);
    
    $c = new Criteria();
    $c->add(AddressPeer::USER_ID, $user->getId());
    $this->address = AddressPeer::doSelectOne($c);
   	
    //$this->address = AddressPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->address);
     $this->privacyoptions = Array('1' => 'Myself', '2' => 'My Classmates', '3' => 'Everyone');  
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $address = new Address();
    }
    else
    {
      $address = AddressPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($address);
    }

    $address->setId($this->getRequestParameter('id'));
    $address->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);
    $address->setAddress($this->getRequestParameter('address'));
    $address->setAddressflag($this->getRequestParameter('addressflag'));
    $address->setCity($this->getRequestParameter('city'));
    $address->setCityflag($this->getRequestParameter('cityflag'));
    $address->setState($this->getRequestParameter('state'));
    $address->setStateflag($this->getRequestParameter('stateflag'));
    $address->setCountry($this->getRequestParameter('country'));
    $address->setCountryflag($this->getRequestParameter('countryflag'));
    $address->setPostalcode($this->getRequestParameter('postalcode'));
    $address->setPostalcodeflag($this->getRequestParameter('postalcodeflag'));
    $address->setPhone1($this->getRequestParameter('phone1'));
    $address->setPhone1flag($this->getRequestParameter('phone1flag'));
    $address->setPhone2($this->getRequestParameter('phone2'));
    $address->setPhone2flag($this->getRequestParameter('phone2flag'));
    $address->setCellphone($this->getRequestParameter('cellphone'));
    $address->setCellphoneflag($this->getRequestParameter('cellphoneflag'));
    $address->setFax($this->getRequestParameter('fax'));
    $address->setFaxflag($this->getRequestParameter('faxflag'));
    $address->setType($this->getRequestParameter('type'));

    $address->save();

    return $this->redirect('address/show?id='.$address->getId());
  }

  public function executeDelete()
  {
    $address = AddressPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($address);

    $address->delete();

    return $this->redirect('address/list');
  }
}
